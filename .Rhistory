usethis::use_gpl3_license()
usethis::use_gpl3_license(".")
library(RiemRegress)
install.packages("np")
H = diag(rep(0.5,3))
x = matrix(1:9,nrow=3)
solve(H,x)
x
H = diag(rep(2,3))
solve(H,x)
x
solve(H,x)
library(RiemRegress)
devtools::document()
seq(from=0.1,to=2,by=0.1)
help(np)
??np
library(RiemBase)
help("RiemBase-package")
help(riemfactory)
x=NULL
length(x)
matrix(1:5)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
folds <- cut(seq(1:20,breaks=10,labels=FALSE)
)
folds <- cut(seq(1:20),breaks=10,labels=FALSE)
folds
sample(1:4,4,replace=FALSE)
sample(1:4,4,replace=FALSE)
sample(1:4,4,replace=FALSE)
sample(1:4,4,replace=FALSE)
sample(1:4,4,replace=FALSE)
sample(1:4,4,replace=TRUE)
sample(1:4,4,replace=FALSE)
sample(1:4,4,replace=FALSE)
??setdiff
setdiff(1:10, c(2,3,4))
library(RiemRegress)
library(RiemRegress)
help(foreach)
??foreach
install.packages(c("parallel","foreach","doParallel"))
install.packages(c("parallel", "foreach", "doParallel"))
??foreach
library(RiemRegress)
library(RiemRegress)
help(riemfactory)
library(RiemRegress)
library(RiemRegress)
ntime=100
t      = seq(from=-0.75,to=0.75,length.out = ntime)
Ft.pop = sin(2*pi*t) # true curve
pole.exp <- function(t, Ft){
datmat = array(0,c(3,length(t)))
datmat[1,] = t
datmat[2,] = Ft
datmat[3,] = 1
outmat = array(0,c(3,length(t)))
x = c(0,0,1)
for (i in 1:length(t)){
u = as.vector(datmat[,i])
d = u-(x*(sum(x*u)))
nrm_td = norm(matrix(d),type="F")
if (nrm_td < 1e-10){
y = x
} else {
y = cos(nrm_td)*x + ((sin(nrm_td))/nrm_td)*d
}
outmat[,i] = y
}
return(outmat)
}
ntime=100
a = 1
b = 1
error = 0.1
t      = seq(from=-0.75,to=0.75,length.out = ntime)
Ft.pop = sin(2*pi*t) # true curve
ntime=100
a = 1
b = 1
error = 0.1
t      = seq(from=-0.75,to=0.75,length.out = ntime)
Ft.pop = sin(2*pi*t)+rnorm(ntime,sd=error) # true curve
t      = seq(from=-0.75,to=0.75,length.out = ntime)
Ft.pop = sin(2*pi*t)+rnorm(ntime,sd=error) # true curve
tmpout = pole.exp(t,Ft.pop)
tmpout
tmpout = riemfactory(pole.exp(t,Ft.pop), name="sphere")
library(RiemBase)
tmpout = RiemBase::riemfactory(pole.exp(t,Ft.pop), name="sphere")
curve.fit   = rmreg.elocal(curve.error)
curve.error = RiemBase::riemfactory(pole.exp(t,Ft.pop), name="sphere")
curve.fit   = rmreg.elocal(curve.error)
rm(list=ls())
library(RiemRegress)
pole.exp <- function(t, Ft){
datmat = array(0,c(3,length(t)))
datmat[1,] = t
datmat[2,] = Ft
datmat[3,] = 1
outmat = array(0,c(3,length(t)))
x = c(0,0,1)
for (i in 1:length(t)){
u = as.vector(datmat[,i])
d = u-(x*(sum(x*u)))
nrm_td = norm(matrix(d),type="F")
if (nrm_td < 1e-10){
y = x
} else {
y = cos(nrm_td)*x + ((sin(nrm_td))/nrm_td)*d
}
outmat[,i] = y
}
return(outmat)
}
ntime=100
a = 1
b = 1
error = 0.1
t      = seq(from=-0.75,to=0.75,length.out = ntime)
Ft.pop = sin(2*pi*t)+rnorm(ntime,sd=error) # true curve
curve.error = RiemBase::riemfactory(pole.exp(t,Ft.pop), name="sphere")
curve.fit   = rmreg.elocal(curve.error)
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error)
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error)
curve.fit   = rmreg.elocal(curve.error, parallel=FALSE)
library(RiemRegress)
pole.exp <- function(t, Ft){
datmat = array(0,c(3,length(t)))
datmat[1,] = t
datmat[2,] = Ft
datmat[3,] = 1
outmat = array(0,c(3,length(t)))
x = c(0,0,1)
for (i in 1:length(t)){
u = as.vector(datmat[,i])
d = u-(x*(sum(x*u)))
nrm_td = norm(matrix(d),type="F")
if (nrm_td < 1e-10){
y = x
} else {
y = cos(nrm_td)*x + ((sin(nrm_td))/nrm_td)*d
}
outmat[,i] = y
}
return(outmat)
}
ntime=100
a = 1
b = 1
error = 0.1
t      = seq(from=-0.75,to=0.75,length.out = ntime)
Ft.pop = sin(2*pi*t)+rnorm(ntime,sd=error) # true curve
curve.error = RiemBase::riemfactory(pole.exp(t,Ft.pop), name="sphere")
curve.fit   = rmreg.elocal(curve.error)
library(RiemRegress)
pole.exp <- function(t, Ft){
datmat = array(0,c(3,length(t)))
datmat[1,] = t
datmat[2,] = Ft
datmat[3,] = 1
outmat = array(0,c(3,length(t)))
x = c(0,0,1)
for (i in 1:length(t)){
u = as.vector(datmat[,i])
d = u-(x*(sum(x*u)))
nrm_td = norm(matrix(d),type="F")
if (nrm_td < 1e-10){
y = x
} else {
y = cos(nrm_td)*x + ((sin(nrm_td))/nrm_td)*d
}
outmat[,i] = y
}
return(outmat)
}
ntime=100
a = 1
b = 1
error = 0.1
t      = seq(from=-0.75,to=0.75,length.out = ntime)
Ft.pop = sin(2*pi*t)+rnorm(ntime,sd=error) # true curve
curve.error = RiemBase::riemfactory(pole.exp(t,Ft.pop), name="sphere")
curve.fit   = rmreg.elocal(curve.error)
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error)
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error)
curve.fit
vech = seq(from=0.1,to=10,by=0.1)
curve.fit   = rmreg.elocal(curve.error, h=vech)
curve.fit
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error, h=vech)
curve.fit
which.min(curve.fit)
library(RiemRegress)
install.packages("text2vec")
library(RiemRegress)
library(RiemRegress)
which.min(curve.fit)
curve.fit   = rmreg.elocal(curve.error, h=vech)
curve.fit
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error, h=vech)
curve.fit   = rmreg.elocal(curve.error, h=vech)
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error, h=vech)
curve.fit
library(RiemBase); hey = riemfactory(curve.fit,name="Sphere")
output = rep(0,100);for (i in 1:100){output[i] = norm(hey[[i]],2)}
output = rep(0,100);for (i in 1:100){output[i] = norm(curve.fit[[i]],2)}
output = rep(0,100);for (i in 1:100){tmp = as.vector(curve.fit[[i]]); output[i] = sum(tmp*tmp)}
output
curve.fit
riemfactory(curve.fit,name=
"sphere")
riemfactory(curve.fit,name=
"sphere")
is.list(curve.fit)
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error, h=vech)
library(RiemRegress)
curve.fit   = rmreg.elocal(curve.error, h=vech)
curve.fit
names(output)
names(curve.fit)
curve.fit$h.optimal
curve.error
curve.fit   = rmreg.elocal(curve.error, h=vech, predict=TRUE, x=1:100, x.predict=1:100)
names(curve.fit)
curve.fit$predict
curve.error
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemBase)
data = list()
for (i in 1:4){data[[i]] = qr.Q(qr(matrix(rnorm(10*4),nrow=10)))}
rbase.pdist(riemfactory(data,name="stiefel"))
rbase.pdist(riemfactory(data,name="grassmann"))
for (i in 1:4){tmp=matrix(rnorm(16),nrow=4);data[[i]]=tmp%*%t(tmp)}
rbase.pdist(riemfactory(data,name="spd"))
detach("package:RiemBase", unload=TRUE)
library("RiemBase", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
detach("package:RiemBase", unload=TRUE)
library(RiemRegress)
rbase.pdist(riemfactory(data,name="spd"))
library("RiemBase", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.5")
rbase.pdist(riemfactory(data,name="spd"))
library(RiemStats)
library(RiemRegress)
library(RiemRegress)
print("ye")
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
library(RiemRegress)
